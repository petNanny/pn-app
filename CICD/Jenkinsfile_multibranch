pipeline {

    agent any

    environment {
        CI = 'false'
        REACT_APP_GOOGLE_MAP_API_KEY = credentials('REACT_APP_GOOGLE_MAP_API_KEY')
        REACT_APP_GOOGLE_MAP_KEY = credentials('REACT_APP_GOOGLE_MAP_KEY')
        REACT_APP_BASE_URL = 'https://uat.backend.petnanny.live/api'
        REACT_APP_GOOGLE_OAUTH_CLIENT_ID = credentials('REACT_APP_GOOGLE_OAUTH_CLIENT_ID')
    }

    // triggers {
    //     cron '''TZ=Australia/Sydney
    //     H H(9-17)/3 * * 1-7'''
    // }

    tools {nodejs "NodeJS"}

    stages {

        stage('Install') {
            steps {
                echo "Installing nodejs packages"
                sh 'npm install'
            }
        }
        
        
        stage('Test') {
            steps {
                echo "Testing"
                sh 'npm test'
            }
        }
        

        stage('Build') {
            steps {
                echo "Building"
                sh 'npm run build'
                }
                
            }
        
        stage('Deploy to UAT') {
            // when {
            //     branch 'dev'
            // }

            steps {
                echo "Deploying to UAT"
                withAWS(credentials: 'aws_pn', region: 'ap-southeast-2') {
                    //clean the bucket
                    sh 'aws s3 rm s3://uat.petnanny.live --recursive'
                    //copy the all files
                    sh 'aws s3 sync ./build s3://uat.petnanny.live'
                }
            }
        }

        // stage('Deploy to Production') {
        //     when {
        //         branch 'main'
        //     }
            
        //     steps {
        //         echo "Deploying to Production"
        //         withAWS(credentials: 'aws_pn', region: 'ap-southeast-2') {
        //             //clean the bucket
        //             sh 'aws s3 rm s3://prod.petnanny.live --recursive'
        //             //copy the all files
        //             sh 'aws s3 sync ./build s3://prod.petnanny.live'
        //         }
        //     }
        // }

        // stage('Invalidate Cache') {
        //     steps {
        //         withAWS(credentials: 'aws_pn', region: 'ap-southeast-2') {
        //             script {
        //                 def response = sh(script: "aws cloudfront create-invalidation --distribution-id ${env.CLOUDFRONT_DISTRIBUTION_ID} --paths '/*'", returnStdout: true)
        //                 echo "CloudFront invalidation submitted. Response: ${response}"
        //             }   
        //         }  
        //     }
        // }
    }
    
    post {

        always {
        cleanWs()
        sh 'ls -la'
        slackSend color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
        }
        
        success {
            echo "In post-success"
            slackSend color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"

        }

         failure {
            echo "In post-failure"
            script {
                findErrorLog()
            }  
        }
    } 
      
}

def findErrorLog() {
    @NonCPS
    def pattern = /.*(Exception|Error): (.+)/
    @NonCPS
    def matcher = currentBuild.rawBuild.getLog(1000) =~ pattern
    if (matcher) {
        slackSend color: '#FF0000', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}): ${matcher[0][1]}"
    } else {
        slackSend color: '#FF0000', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
    }
}